
[[plugins]]
repo = 'airblade/vim-gitgutter'
on_path = '.*'

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_path = '.*'
on_i = 1
hook_add = '''
let g:AutoPairsMultilineClose = 0
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap w <Plug>(easymotion-lineforward)
  nnoremap W     w
  nmap b <Plug>(easymotion-linebackward)
  nnoremap B     b
  nmap ' <Plug>(easymotion-overwin-f)

  let g:EasyMotion_startofline = 0
  let g:EasyMotion_show_prompt = 0
  let g:EasyMotion_verbose = 0
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
on_path = '.*'
hook_add = '''
  if executable('editorconfig')
    let g:EditorConfig_core_mode = 'external_command'
  else
    let g:EditorConfig_core_mode = 'python_external'
  endif
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_types = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
  let g:go_fmt_autosave = 1
'''

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown', 'rst', 'mkd']
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'mojako/ref-sources.vim'
on_source = 'vim-ref'
hook_source= '''
  if (isdirectory(expand('~/.ghq/github.com/tokuhirom/jsref/htdocs')))
    let g:ref_javascript_doc_path = expand('~/.ghq/github.com/tokuhirom/jsref/htdocs')
  endif
  let g:ref_use_cache = 1
  let g:ref_wikipedia_lang = {'wiki': 'ja', 'wikie': 'en'}
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = '''
  source ~/.config/nvim/plugins/denite.rc.vim
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = 'call echodoc#enable()'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
on_source = 'denite.nvim'
hook_add = '''
  source ~/.config/nvim/plugins/unite.rc.vim
'''

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.nvim'

# [[plugins]]
# repo = 'Shougo/neoinclude.vim'
# # on_if = 1 # this make deoplete crash
# on_ft = ['c', 'cpp', 'cc']

[[plugins]]
# to use unite file_mru
repo = 'Shougo/neomru.vim'
on_if = 1
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source='''
  source ~/.config/nvim/plugins/neosnippet.rc.vim
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
on_cmd = ['VimFiler', 'VimFilerExplorer']
hook_add = '''
  let g:vimfiler_as_default_explorer = 1
'''

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = 'let g:vinarise_enable_auto_detect = 1'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = {n = '<Plug>'}
hook_add = '''
source ~/.config/nvim/plugins/quickrun.rc.vim
'''

[[plugins]]
repo = 'thinca/vim-ref'
on_map = {n = '<Plug>'}
hook_source = '''
  let g:ref_cache_dir = expand('~/.cache/ref')
  let g:ref_use_vimproc = 1

  autocmd MyAutoCmd FileType ref call s:ref_my_settings()
  function! s:ref_my_settings() abort "{{{
    " Overwrite settings.
    nmap <buffer> [Tag]t  <Plug>(ref-keyword)
    nmap <buffer> [Tag]p  <Plug>(ref-back)
    nnoremap <buffer> <TAB> <C-w>w
  endfunction"}}}
'''

[[plugins]]
repo = 'tpope/vim-surround'
on_path = '.*'

[[plugins]]
# comment out easyly
repo = 'tyru/caw.vim'
on_map = { nx = '<Plug>' }
hook_add='''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> <C-_>
      silent! xunmap <buffer> <C-_>
    else
      nmap <buffer> <C-_> <Plug>(caw:hatpos:toggle)
      xmap <buffer> <C-_> <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
########################################################

[[plugins]]
repo = 'mattn/gist-vim'
on_cmd = 'Gist'

[[plugins]]
repo = 'mattn/webapi-vim'
on_source = ['slack-memo-vim', 'gist-vim']

[[plugins]]
repo = 'tsuyoshiwada/slack-memo-vim'
depends = 'webapi-vim'
on_cmd = ['SlackMemoPost', 'SlackMemoList']

[[plugins]]
repo = 'takac/vim-hardtime'
on_cmd = 'HardTimeOn'

[[plugins]]
repo = 'sunaku/vim-dasht'
on_cmd = 'Dasht'
hook_add = '''
  let g:dasht_filetype_docsets = {} " filetype => list of docset name regexp

  let g:dasht_filetype_docsets['cpp'] = ['^c$', 'boost', 'OpenGL', 'C\+\+']
  let g:dasht_filetype_docsets['javascript.jsx'] = ['javascript']
'''

[[plugins]]
repo = 'yuratomo/w3m.vim'
on_cmd = 'W3m'

# [[plugins]]
# repo = 'vim-latex/vim-latex'
# on_ft = 'tex'

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_add = '''
let g:vimtex_latexmk_continuous = 1
let g:vimtex_latexmk_background = 1
let g:vimtex_latexmk_options = '-pdfdvi'
if has('mac')
  let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
else
  let g:vimtex_view_general_viewer = 'xdg-open'
endif
let g:vimtex_view_general_options = '@line @pdf @tex'
'''

[[plugins]]
repo = 'sbdchd/neoformat'
on_cmd = 'Neoformat'

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'

[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoList', 'MemoGrep']
hook_add = '''
let g:memolist_memo_suffix = "md"

" let g:memolist_qfixgrep = 1

let g:memolist_denite = 1
" let g:memolist_denite_option = "-auto-preview"

let g:memolist_prompt_tags = 0
let g:memolist_prompt_categories = 1

let g:memolist_delimiter_yaml_start = "---"
let g:memolist_delimiter_yaml_end  = "---"
'''

[[plugins]]
repo = 'francoiscabrol/ranger.vim'
on_cmd = 'Ranger'
hook_add = '''
let g:ranger_map_keys = 0
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
let g:jedi#auto_initialization = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#use_tabs_not_buffers = 0  " current default is 1.
" let g:jedi#rename_command = '<Leader>gR'
" let g:jedi#usages_command = '<Leader>gu'
let g:jedi#completions_enabled = 0
"let g:jedi#smart_auto_mappings = 1

" Unite/ref and pydoc are more useful.
" let g:jedi#documentation_command = '<Leader>_K'
" let g:jedi#auto_close_doc = 1
'''
